#!/usr/bin/env python
#
# Copyright 2022 Red Hat Inc.
# SPDX-License-Identifier: Apache-2.0
#
import argparse
import csv
import json
import logging
import os
import requests
import sys


logging.basicConfig(
    format="%(module)s : %(asctime)s : %(levelname)s : %(message)s",
    datefmt="%m/%d/%Y %I:%M:%S %p",
    level=logging.INFO,
)
LOG = logging.getLogger("gabitabi")


GABI_REQUEST_DEBUG_TMPL = (
    "gabi request::{0}    gabi url: {{url}}{0}    gabi headers: {{headers}}{0}    gabi query: {{query_data}}".format(
        os.linesep
    )
)


class GabiError(Exception):
    """Errors specific to gabi"""
    pass


class GabiTabiError(Exception):
    """Errors specific to gabitabi"""
    pass


def healthcheck(url, token, verify=True):
    """Verify that gabi is available."""
    headers = {"Authorization": f"Bearer {token}"}
    h_url = f"{url}/healthcheck"
    LOG.debug(GABI_REQUEST_DEBUG_TMPL.format(url=h_url, headers=headers, query_data={}))
    resp = requests.get(h_url, headers=headers, verify=verify)
    if not resp.ok:
        raise GabiError(f"HTTP {resp.status_code} {resp.reason} : {resp.text}")
    data = resp.json()
    if data["status"] != "OK":
        raise GabiError(f"Gabi healthcheck returned {data['status']}")

    LOG.info("gabi is available")

    return True


def submit_query_request(url, token, query, verify=True):
    """Submit the query to gabi in the expected shape"""
    query_data = {"query": query}
    headers = {"Authorization": f"Bearer {token}"}
    q_url = f"{url}/query"
    LOG.info("Submitting query to gabi")
    LOG.debug(GABI_REQUEST_DEBUG_TMPL.format(url=q_url, headers=headers, query_data=json.dumps(query_data)))
    resp = requests.post(q_url, headers=headers, json=query_data, verify=verify)
    if not resp.ok:
        raise GabiError(f"HTTP {resp.status_code} {resp.reason} : {resp.text}")

    data = resp.json()
    if data["error"]:
        raise GabiError(data["error"])

    return data


def process_results(out_file_name, fieldsep, data, format_csv=True):
    """Process gabi json result into csv"""
    if data is not None and data["result"] is not None:
        out = sys.stdout if not out_file_name else open(out_file_name, "wt")
        try:
            if format_csv:
                LOG.info(f"Writing {len(data['result'])} CSV records to {out_file_name or 'STDOUT'}")
                writer = csv.writer(out, quoting=csv.QUOTE_ALL, delimiter=fieldsep)
                writer.writerows(data["result"])
            else:
                LOG.info(f"Writing JSON data to {out_file_name or 'STDOUT'}")
                out.write(json.dumps(data["result"]))
        finally:
            out.flush()
            out.close()
    else:
        LOG.info("No results returned")


def validate_args(url, token, query):
    """Validate that url, token, and query are not empty."""
    LOG.info("Validating arguments")
    if not url:
        raise GabiTabiError("The gabi instance URL is required")
    if not token:
        raise GabiTabiError("Your OCP console token is required")
    if not query:
        LOG.info("No query to process.")
        return False

    return True


def process_query(out_file_name, url, token, query, fieldsep, format_csv=True, verify=True):
    """Validate gabi parameters, submit the query, format the result for csv."""
    if not validate_args(url, token, query):
        exit(1)
    result = submit_query_request(url, token, query, verify)
    process_results(out_file_name, fieldsep, result, format_csv=format_csv)


if __name__ == "__main__":
    def gabitabi_argparser():
        """Initialize parser and set arguments"""
        arg_parser = argparse.ArgumentParser(
            description="gabitabi: Submit a SQL query to gabi and format the response as CSV."
        )
        arg_parser.add_argument(
            "-u",
            "--url",
            metavar="GABIURL",
            dest="url",
            required=False,
            help="Gabi instance URL. Can also use env GABI_URL",
        )
        arg_parser.add_argument(
            "-t",
            "--token",
            metavar="TOKEN",
            dest="token",
            required=False,
            help="Openshift console token. Can also use env OCP_CONSOLE_TOKEN",
        )
        arg_parser.add_argument(
            "-q",
            "--query",
            metavar="QUERY",
            dest="query",
            required=False,
            help="SQL query to execute. If '-', will read from STDIN",
        )
        arg_parser.add_argument(
            "-Q",
            "--query-file",
            metavar="QUERYFILE",
            dest="query_file",
            required=False,
            help="Process query from file. (Overrides -q)",
        )
        arg_parser.add_argument(
            "-o",
            "--output",
            metavar="FILE",
            dest="out_file_name",
            required=False,
            help="Output file name. If omitted, will use STDOUT",
        )
        arg_parser.add_argument(
            "--sep",
            metavar="SEP",
            dest="separator",
            required=False,
            default="\t",
            help="Output field separator. Default is TAB.",
        )
        arg_parser.add_argument(
            "--no-csv", action="store_false", dest="csv", required=False, default=True, help="Do not convert to CSV."
        )
        arg_parser.add_argument(
            "--ping",
            dest="only_ping",
            action="store_true",
            default=False,
            required=False,
            help="Detect if gabi is available and exit.",
        )
        arg_parser.add_argument(
            "--debug",
            dest="do_debug",
            action="store_true",
            default=False,
            required=False,
            help="Set logging level to DEBUG.",
        )
        arg_parser.add_argument(
            '--noverify',
            dest='verify',
            action='store_false',
            default=True,
            required=False,
            help='Do not verify the SSL certificate',
        )

        return arg_parser


    def process_args(parser):
        """Procerss the parsed arguments to the program"""
        args = parser.parse_args()
        if not args.url:
            args.url = os.environ.get("GABI_URL")
        if not args.token:
            args.token = os.environ.get("OCP_CONSOLE_TOKEN")
        if args.query_file:
            args.query = open(args.query_file, "rt").read()
        elif args.query == '-':
            args.query = sys.stdin.read()

        if args.url is None or args.token is None:
            # No environment, no args?  Probably need some help here.
            sys.stderr.write("Error: URL and token not set\n")
            parser.print_help()
            exit(0)

        if type(args.query) == "bytes":
            args.query = args.query.decode("utf-8")

        if args.do_debug:
            LOG.setLevel(logging.DEBUG)

        return args


    # Init, get, and process the arguments
    args = process_args(gabitabi_argparser())

    # Verify that gabi is available
    healthcheck(args.url, args.token, args.verify)
    if args.only_ping:
        sys.exit(0)

    # Call the main processing entrypoint
    process_query(
        args.out_file_name, args.url, args.token, args.query,
        args.separator, verify=args.verify
    )
